Untitled Chore App Setup Instructions:

There are three components that will need setting up and deploying:
1. Azure Cosmos DB
2. Backend API 
3. Frontend server

===================================

1. Azure Cosmos DB

a. Follow the instructions on Azure for creating a new CosmosDB instance
b. Once deployed add a database 'uca' and containers 'chores', 'users', 'timetables' & 'users'
c. Take note of the resource URI and the primary key.

2. Backend API

We deployed the backend using an Azure web app that is linked to its Github repository and delpoys via a 
continuous integration pipeline that was auto-generated by Azure. To replicate this, you would need your
own repository to deploy from; this made it easier for us to deploy changes to the cloud.

a. Add the CosmosDB resource URI and primary key to the .env file in the root directory of the backend folder
b. Create a new web app on azure:
	i. Select 'Python 3.10' as a runtime stack
	ii. Under deployment, enable GitHub Actions and select the repository and the main branch. If you aren't 
	    using GitHub, this can also be done under the Deployment Center once the app is created.
	iii. Once the repository is linked head to Settings > Configuration > General settings and add the 
	     following startup command

	     gunicorn -w 2 -k uvicorn.workers.UvicornWorker main:app

	iv. Save the changes and it will redeploy
c. Test the deployment has worked by going to {domain}.azurewebsites.net/docs and you should see an OpenAPI
   specification.

3. Frontend server

We deployed the frontend using the Google Cloud App Engine. Instructions to deploy include:

a. In the Google Cloud console create a new project
b. In the newly created project create an application using App Engine
    i. Set Location -> europe-west2
    ii. Set Language -> Node.js
    iii. Set Environment -> Standard
c. In the project directory open the terminal and run:
    i. 'gcloud init' to set the current project to {new_project}
    ii. 'npm install' to install the required packages
    iii. 'npm run build' to build the project 
    iv. 'npm run gdeploy' to deploy a test version (target URL is displayed)
    v. 'gcloud app versions stop test' stops the test deployment
